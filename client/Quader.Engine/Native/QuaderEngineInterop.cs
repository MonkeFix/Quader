using System;
using System.Collections.Generic;
//using System.Drawing;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.Marshalling;
using Quader.Engine.Numerics;
using Quader.Engine.Pieces;
using Quader.Engine.Settings;

namespace Quader.Engine.Native;

/*[NativeMarshalling(typeof(ExampleMarshaller))]
public struct Example
{
    public string Message;
    public int Flags;
}

[CustomMarshaller(typeof(Example), MarshalMode.Default, typeof(ExampleMarshaller))]
internal static class ExampleMarshaller
{
    public static ExampleUnmanaged ConvertToUnmanaged(Example managed)
        => throw new NotImplementedException();

    public static Example ConvertToManaged(ExampleUnmanaged unmanaged)
        => throw new NotImplementedException();

    public static void Free(ExampleUnmanaged unmanaged)
        => throw new NotImplementedException();

    internal struct ExampleUnmanaged
    {
        public IntPtr Message;
        public int Flags;
    }
}*/


[StructLayout(LayoutKind.Sequential)]
//[NativeMarshalling(typeof(TestDllClassMarshaller))]
public class TestDllClass
{
    public int TestField;
    public int TestProp { get; set; }
    
    [MarshalAs(UnmanagedType.Struct)]
    public AttackSettings AttackSettings = new AttackSettings();

    [MarshalAs(UnmanagedType.ByValArray)] public int[] TestArr;

    //[MarshalAs(UnmanagedType.SafeArray)]
    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 3)]
    public int[][] Pts2 = new int[3][];
    
    //public Dictionary<PieceRotationType, Point[]> WallKickData;

    /*public TestDllClass()
    {
        Pts2[0] = new[] { 1, 2 };
        Pts2[1] = new[] { 3, 4 };
        Pts2[2] = new[] { 5, 6 };
    }*/
    
    public void Test()
    {
        Console.WriteLine("Hello from Test!");
    }
}



// ReSharper disable once ClassNeverInstantiated.Global
internal class QuaderEngineInterop
{
    [UnmanagedCallersOnly(EntryPoint = "q_board_create")]
    public static IntPtr CreateBoard()
    {
        
        var board = new Board(GameSettings.Default);
        var memory = Marshal.AllocHGlobal(Marshal.SizeOf(board));
        Marshal.StructureToPtr(board, memory, false);
        return memory;
    }

    [UnmanagedCallersOnly(EntryPoint = "q_board_destroy")]
    public static void DestroyBoard(IntPtr boardPtr)
    {
        Marshal.FreeHGlobal(boardPtr);
    }
    
    [UnmanagedCallersOnly(EntryPoint = "q_test_create")]
    public static IntPtr CreatTest()
    {
        var test = new TestDllClass();
        var memory = Marshal.AllocHGlobal(Marshal.SizeOf(test));
        Marshal.StructureToPtr(test, memory, false);
        return memory;
    }
    
    [UnmanagedCallersOnly(EntryPoint = "q_test_test")]
    public static void TestTest(IntPtr test)
    {
       var structure = Marshal.PtrToStructure<TestDllClass>(test);
       structure.TestField = 1;
       structure.TestProp = 5;
       structure.Test();
    }
    
    [UnmanagedCallersOnly(EntryPoint = "q_test_destroy")]
    public static void DestroyTest(IntPtr testPtr)
    {
        Marshal.FreeHGlobal(testPtr);
    }
    
    [UnmanagedCallersOnly(EntryPoint = "q_test_get_points")]
    public static IntPtr GetPointsTest(IntPtr testPtr)
    {
        var structure = Marshal.PtrToStructure<TestDllClass>(testPtr);
        
        var size = Marshal.SizeOf(structure.Pts2);
        IntPtr arr = Marshal.AllocHGlobal(size);
        Marshal.StructureToPtr(structure.Pts2, arr, false);

        return arr;
    }

    
    [UnmanagedCallersOnly(EntryPoint = "add")]
    public static int Add(int a, int b)
    {
        return a + b;
    }

    [UnmanagedCallersOnly(EntryPoint = "write_line")]
    public static int WriteLine(IntPtr pString)
    {
        // The marshalling code is typically auto-generated by a custom tool in larger projects.
        try
        {
            // UnmanagedCallersOnly methods only accept primitive arguments. The primitive arguments
            // have to be marshalled manually if necessary.
            string? str = Marshal.PtrToStringAnsi(pString);

            Console.WriteLine(str);
        }
        catch
        {
            // Exceptions escaping out of UnmanagedCallersOnly methods are treated as unhandled exceptions.
            // The errors have to be marshalled manually if necessary.
            return -1;
        }
        return 0;
    }

    [UnmanagedCallersOnly(EntryPoint = "sumstring")]
    public static IntPtr sumstring(IntPtr first, IntPtr second)
    {
        // Parse strings from the passed pointers 
        string? my1String = Marshal.PtrToStringAnsi(first);
        string? my2String = Marshal.PtrToStringAnsi(second);

        // Concatenate strings 
        string sum = my1String + my2String;

        // Assign pointer of the concatenated string to sumPointer
        IntPtr sumPointer = Marshal.StringToCoTaskMemAnsi(sum);

        // Return pointer
        return sumPointer;
    }
}